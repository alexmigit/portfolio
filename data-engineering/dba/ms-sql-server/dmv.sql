-- **********************************
-- New and Changed DMVs and Functions
-- migit@hpe.com
-- **********************************
-- Sample queries based on BOL

-- ****************************
-- sys.dm_os_volume_stats (new)
-- ****************************

-- Get total and available space in bytes for all database files
SELECT f.database_id, d.name, f.file_id, volume_mount_point, total_bytes, available_bytes
FROM sys.master_files AS f
INNER JOIN sys.databases AS d 
ON f.database_id = d.database_id
CROSS APPLY sys.dm_os_volume_stats(f.database_id, f.file_id);

-- ****************************
-- sys.dm_os_windows_info (new)
-- ****************************

-- Get all available OS information
SELECT * FROM sys.dm_os_windows_info;
-- Pretty simple!

-- ********************************
-- sys.dm_server_memory_dumps (new)
-- sys.dm_server_services (new)
-- sys.dm_server_registry (new)
-- ********************************

-- Get information about each memory dump file generated by SQL Server
SELECT * FROM sys.dm_server_memory_dumps;

-- Get list of SQL Server's windows services
SELECT * FROM sys.dm_server_services;

-- Get configuration and installation information stored in the windows
-- registry for the current instance of SQL Server. Returns one row per
-- registry key.
SELECT * FROM sys.dm_server_registry;

-- Get value of specific key
SELECT registry_key, value_name, value_data
	FROM sys.dm_server_registry
	WHERE value_name = N'CurrentVersion';
	
-- *********************************
-- sys.dm_exec_query_stats (changed)
-- *********************************

-- Run a few queries in AdventureWorks2012
SELECT * FROM [Production].[Product];
SELECT TOP 1 Name, Color, MAX(weight) AS weight from Production.Product
	GROUP BY Name, Color
	ORDER BY MAX(weight) DESC;
SELECT st.SalesTaxRateID, st.Name, st.TaxType, sp.Name AS StateName
	FROM Sales.SalesTaxRate st
		JOIN Person.StateProvince sp 
		ON st.StateProvinceID = sp.StateProvinceID
	WHERE sp.CountryRegionCode = 'US'
	ORDER BY StateName;
	
-- Use sys.dm_exec_query_stats DMV (from BOL)
-- (Don't need to run in same batch as previous queries)
SELECT qs.execution_count,
	SUBSTRING(qt.text, qs.statement_start_offset/2 +1, 
				(CASE WHEN qs.statement_end_offset = -1 
					  THEN LEN(CONVERT(nvarchar(max), qt.text)) * 2 
					  ELSE qs.statement_end_offset end - 
					       qs.statement_start_offset
				)/2
			 ) AS query_text,
	qt.dbib, dbname= DB_NAME (qt.dbid), qt.objectid, qs.total_rows, qs.last_rows, qs.min_rows, qs.max_rows
FROM sys.dm_exec_query_stats AS qs
CROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) AS qt
WHERE qt.text like '%SELECT%'
ORDER BY qs.execution_count DESC;

-- New columns (all return BIGINTS):
-- total_rows: Total number of rows returned by the query. Cannot be null.
-- last_rows: Number of rows returned by the last execution of the query. Cannot be null.
-- min_rows: Minimum number of rows returned by the query over the number of times.
--		that the plan has been executed since it was last compiled. Cannot be null.
-- max_rows: Maximum number of rows returned by the query over the number of times
--		that the plan has been executed since it was last compiled. Cannot be null.

